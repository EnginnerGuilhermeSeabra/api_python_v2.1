services:
  api:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - TEMPERATURE=${TEMPERATURE}
      - MAX_TOKENS=${MAX_TOKENS}
      - TOP_P=${TOP_P}
    depends_on:
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_app_worker:
    build: .
    command: celery -A app.celery worker --loglevel=INFO --concurrency=4
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CHOSEN_LLM=${CHOSEN_LLM}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - TEMPERATURE=${TEMPERATURE}
      - MAX_TOKENS=${MAX_TOKENS}
      - TOP_P=${TOP_P}
    depends_on:
      - rabbitmq

  flower: # SERVIcO FLOWER
    image: mher/flower:latest
    ports:
      - "5555:5555"
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - FLOWER_PORT=5555
    depends_on:
      - rabbitmq
      - celery_app_worker

volumes:
  postgres_data:
